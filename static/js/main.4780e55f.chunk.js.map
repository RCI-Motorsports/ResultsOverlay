{"version":3,"sources":["OptionsList.js","enums.js","SessionResults/SessionResultEntry.js","SessionResults/SessionResultsPage.js","SessionResults/SessionResultsMenu.js","Championship/ChampionshipStandingsEntry.js","Championship/ChampionshipStandingsPage.js","Championship/ChampionshipStandingsMenu.js","util.js","menu.js","App.js","serviceWorker.js","index.js"],"names":["Component","ENTRY_VISUAL_STATE","SessionResultEntry","props","text","this","visualstate","entry","car","teamName","currentDriver","firstName","lastName","key","carId","className","position","raceNumber","carName","timing","bestLapFormatted","timeDiffFormatted","SessionResultsPage","_handleKeyDown","event","keyCode","NEXT_PAGE_KEY","newPage","currentPage","content","leaderboard","length","_updateEntries","TEAM_DRIVER_SWAP_KEY","state","visState","setState","a","_clearEntries","_addEntries","p","Promise","resolve","_removeEntry","onCleared","entries","pageEntries","shift","setTimeout","newEntries","_addEntry","newEntry","push","charCodeAt","document","addEventListener","removeEventListener","title","track","session","TransitionGroup","map","idx","CSSTransition","classNames","timeout","style","SessionResultsMenu","chunkLeaderboardLines","lines","i","retArray","tmp","slice","msToTime","ms","Date","toISOString","addPositionField","isRace","firstPlaceLaps","lapCount","firstPlaceTime","totalTime","firstPlaceBestLap","bestLap","line","CarMapping","carModel","lapCountDiff","timeDiff","onFileRead","e","fReader","result","resContent","JSON","parse","resultObj","SessionMapping","sessionType","TrackMapping","trackName","leaderBoardLinesWithPos","sessionResult","leaderBoardLines","leaderboardChunks","dataLoaded","onUpload","onloadend","readAsText","fileInput","current","files","handleChange","target","value","React","createRef","textInput","FileReader","component","type","placeholder","onChange","ref","onClick","ChampionshipStandingsEntry","category","carNumber","name","points","ChampionshipStandingsPage","newCategoryIndex","currentCategoryIndex","categoryName","currentTitle","id","COLUMN_MAPPING","ChampionshipStandingsMenu","csvArray","strData","strDelimiter","objPattern","RegExp","arrData","arrMatches","exec","strMatchedValue","strMatchedDelimiter","replace","CSVToArray","filter","class","paginateStandings","linesPerPage","categorizedLines","reduce","Object","keys","pages","sort","b","aIndex","paginationOrder","indexOf","bIndex","OPTIONS","Menu","onClickedOption","clicked","activePage","Button","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4780e55f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass OptionsList extends Component {\r\n    allOptions = [/*\"Leaderboard\", */\"From results .json\"];\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='MainMenu'>\r\n                {\r\n                    this.allOptions.map((option, idx) => {\r\n                        return (<div key={idx} background='black' onClick={() => {\r\n                            this.props.onClickedOption(option);\r\n                        }}>\r\n                            {option}\r\n                        </div>)\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default OptionsList;","export const ENTRY_VISUAL_STATE = {\r\n    DRIVER: \"driver\",\r\n    TEAM: \"team\"\r\n}","import React, { Component } from 'react';\r\nimport { ENTRY_VISUAL_STATE } from '../enums';\r\n\r\n\r\n\r\nclass SessionResultEntry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        \r\n        let text = \"\";\r\n        if (this.props.visualstate === ENTRY_VISUAL_STATE.TEAM) {\r\n            text = this.props.entry.car.teamName;\r\n        } else {\r\n            text = this.props.entry.currentDriver.firstName + \" \" + this.props.entry.currentDriver.lastName;\r\n        }\r\n\r\n        return (\r\n            <div key={ this.props.entry.car.carId } className='Row SessionResultRow'>\r\n                <div className='PositionCol'>{ this.props.entry.position }</div>\r\n                <div className='CarnumberCol'>{ this.props.entry.car.raceNumber }</div>\r\n                <div className='DriverCol'>{ text }</div>\r\n                <div className='CarCol'>{ this.props.entry.carName }</div>\r\n                <div className='TimeCol'>{ this.props.entry.timing.bestLapFormatted }</div>\r\n                <div className='TimeDiffCol'>{ this.props.entry.timing.timeDiffFormatted }</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SessionResultEntry;","import React, { Component } from 'react';\r\nimport { ENTRY_VISUAL_STATE } from '../enums';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group'\r\nimport SessionResultEntry from './SessionResultEntry';\r\n\r\nclass SessionResultsPage extends Component {\r\n    currentPage\r\n    NEXT_PAGE_KEY\r\n    TEAM_DRIVER_SWAP_KEY\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.currentPage = -1;\r\n        this.NEXT_PAGE_KEY = 'Q'.charCodeAt(0);\r\n        this.TEAM_DRIVER_SWAP_KEY = 'W'.charCodeAt(0);\r\n\r\n        this.state = {\r\n            pageEntries: [],\r\n            visState: ENTRY_VISUAL_STATE.DRIVER\r\n        }\r\n    }\r\n\r\n    _handleKeyDown = (event) => {\r\n        if (event.keyCode === this.NEXT_PAGE_KEY) {\r\n            let newPage = this.currentPage + 1;\r\n            if (newPage === this.props.content.leaderboard.length) {\r\n                newPage = 0;\r\n            }\r\n\r\n            this._updateEntries(newPage);\r\n        } else if (event.keyCode === this.TEAM_DRIVER_SWAP_KEY) {\r\n            if (this.state.visState === ENTRY_VISUAL_STATE.TEAM) {\r\n                this.setState({ visState: ENTRY_VISUAL_STATE.DRIVER });\r\n            } else if (this.state.visState === ENTRY_VISUAL_STATE.DRIVER) {\r\n                this.setState({ visState: ENTRY_VISUAL_STATE.TEAM });\r\n            }\r\n        }\r\n    }\r\n\r\n    _updateEntries = async (newPage) => {\r\n        // clear current entries\r\n        await this._clearEntries();\r\n        this.currentPage = newPage;\r\n        await this._addEntries();\r\n    }\r\n\r\n    _clearEntries = async () => {\r\n        const p = new Promise(resolve => {\r\n            this._removeEntry(() => {\r\n                resolve();\r\n            });\r\n        });\r\n        return p;\r\n    }\r\n\r\n    _removeEntry = (onCleared) => {\r\n        let entries = [...this.state.pageEntries];\r\n        entries.shift();\r\n        this.setState({ pageEntries: entries });\r\n        if (entries.length > 0) {\r\n            setTimeout(() => { this._removeEntry(onCleared) }, 100);\r\n        } else {\r\n            setTimeout(() => { onCleared() }, 600);\r\n        }\r\n    }\r\n\r\n    _addEntries = async () => {\r\n        const newEntries = [...this.props.content.leaderboard[this.currentPage]];\r\n        for(const entry of newEntries) {\r\n            await this._addEntry(entry);\r\n        }\r\n    }\r\n\r\n    _addEntry = async (newEntry) => {\r\n        const p = new Promise(resolve => {\r\n            const newEntries = [...this.state.pageEntries];\r\n            newEntries.push(newEntry);\r\n            this.setState({ pageEntries: newEntries});\r\n            setTimeout(() => { resolve() }, 100);\r\n        });\r\n\r\n        return p;\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"keydown\", this._handleKeyDown);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener(\"keydown\", this._handleKeyDown);\r\n    }\r\n\r\n    render() {\r\n        const entries = this.state.pageEntries;\r\n        const visState = this.state.visState;\r\n\r\n        return (\r\n            <div className='SessionResultsPage'>\r\n                <div className='Title'>{`${this.props.title} - ${this.props.content.track} - ${this.props.content.session}`}</div>\r\n                <TransitionGroup>\r\n                    {entries.map((entry, idx) => {\r\n                        return (\r\n                            <CSSTransition\r\n                                key={`${entry.car.carId}-transition`}\r\n                                classNames=\"item\"\r\n                                timeout={2200}\r\n                            >\r\n                                <SessionResultEntry key={entry.car.carId} entry={entry} visualstate={visState} style={idx % 2 === 0 ? 'div-entry-1' : 'div-entry-2'} />\r\n                            </CSSTransition>\r\n                        )\r\n                    })}\r\n                </TransitionGroup>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SessionResultsPage;","import React, { Component } from 'react';\r\nimport SessionResultsPage from './SessionResultsPage';\r\nimport TrackMapping from '../track_name_mapping.json';\r\nimport SessionMapping from '../session_mapping.json';\r\nimport CarMapping from '../car_name_mapping.json';\r\n\r\nclass SessionResultsMenu extends Component {\r\n    intervalID;\r\n    fReader;\r\n    content;\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {dataLoaded: false, title: ''};\r\n        this.fileInput = React.createRef();\r\n        this.textInput = React.createRef();\r\n        this.fReader = new FileReader();\r\n    }\r\n\r\n    chunkLeaderboardLines = (lines) => {\r\n        let retArray = [];\r\n        let i, j, chunk = 10;\r\n        for (i = 0; i < lines.length; i += chunk) {\r\n            let tmp = lines.slice(i, i + chunk);\r\n            retArray.push(tmp);\r\n        }\r\n        return retArray;\r\n    }\r\n\r\n    msToTime = (ms) => {\r\n        return new Date(ms).toISOString().slice(14, -1);\r\n    }\r\n\r\n    addPositionField = (lines, isRace) => {\r\n        const firstPlaceLaps = lines[0].timing.lapCount;\r\n        const firstPlaceTime = lines[0].timing.totalTime;\r\n        const firstPlaceBestLap = lines[0].timing.bestLap;\r\n        \r\n        return lines.map((line, idx) => {\r\n            line['position'] = idx + 1;\r\n            line['carName'] = CarMapping[line.car.carModel];\r\n            \r\n            let timeDiffFormatted = '---';\r\n\r\n            if (isRace) {\r\n                if (line.timing.lapCount < firstPlaceLaps) {\r\n                    const lapCountDiff = firstPlaceLaps - line.timing.lapCount;\r\n                    timeDiffFormatted = `+${lapCountDiff} lap${lapCountDiff > 1 ? 's' : ''}`;\r\n                }\r\n                else {\r\n                    line.timing['timeDiff'] = line.timing.totalTime - firstPlaceTime;\r\n                    timeDiffFormatted = idx === 0 ? '' : '+' + this.msToTime(line.timing.timeDiff);\r\n                }\r\n            } else {\r\n                line.timing['timeDiff'] = idx === 0 ? 0 : lines[idx].timing.bestLap - firstPlaceBestLap;\r\n                timeDiffFormatted = idx === 0 ? '' : '+' + this.msToTime(line.timing.timeDiff);\r\n            }\r\n\r\n            line.timing['timeDiffFormatted'] = timeDiffFormatted;\r\n            line.timing['bestLapFormatted'] = this.msToTime(line.timing.bestLap);\r\n            \r\n            return line;\r\n        })\r\n    }\r\n\r\n    onFileRead = (e) => {\r\n        const content = this.fReader.result;\r\n        \r\n        const resContent = JSON.parse(content);\r\n\r\n        let resultObj = {\r\n            'session': SessionMapping[resContent.sessionType],\r\n            'track': TrackMapping[resContent.trackName]\r\n        };\r\n        \r\n        const leaderBoardLinesWithPos = this.addPositionField(\r\n            resContent.sessionResult.leaderBoardLines, \r\n            resContent.sessionType === 'R'\r\n        );\r\n        const leaderboardChunks = this.chunkLeaderboardLines(leaderBoardLinesWithPos);\r\n        resultObj['leaderboard'] = leaderboardChunks;\r\n\r\n        this.content = resultObj;\r\n\r\n        this.setState({dataLoaded: true});\r\n    }\r\n\r\n    onUpload = () => {\r\n        this.fReader.onloadend = this.onFileRead;\r\n        this.fReader.readAsText(this.fileInput.current.files[0], 'UTF-16LE');\r\n    }\r\n\r\n    handleChange = (event) => {    \r\n        this.setState({title: event.target.value});  \r\n    }\r\n\r\n    render() {\r\n\r\n        let component = \r\n        <div className='MainMenu'>\r\n            <div><input type=\"text\" placeholder='Title..' onChange={this.handleChange}/></div>\r\n            <div><input type=\"file\" ref={this.fileInput}/></div>\r\n            <div><button type=\"button\" onClick={this.onUpload}>load</button></div>\r\n        </div>;\r\n        if (this.state.dataLoaded) {\r\n            component = <div className='SessionResultsPage'>\r\n                            <SessionResultsPage content={this.content} title={this.state.title}/>\r\n                        </div>;\r\n        }\r\n        return component;\r\n    }\r\n}\r\n\r\nexport default SessionResultsMenu;","import React, { Component } from 'react';\r\n\r\nclass ChampionshipStandingsEntry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <div className={`Row ChampionshipStandingsRow-${this.props.entry.category}`}>\r\n                <div className='ChampionshipStandingsPositionCol'>{ this.props.entry.position }</div>\r\n                <div className={`ChampionshipStandingsCarNumCol ${this.props.entry.category}`}>{ this.props.entry.carNumber }</div>\r\n                <div className='ChampionshipStandingsNameCol'>{ this.props.entry.name }</div>\r\n                <div className='ChampionshipStandingsCarCol'>{ this.props.entry.car }</div>\r\n                <div className='ChampionshipStandingsPointsCol'>{ this.props.entry.points }</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChampionshipStandingsEntry;","import React, { Component } from 'react';\r\nimport { ENTRY_VISUAL_STATE } from '../enums';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group'\r\nimport ChampionshipStandingsEntry from './ChampionshipStandingsEntry';\r\n\r\nclass ChampionshipStandingsPage extends Component {\r\n\r\n    currentPage\r\n    currentCategoryIndex\r\n    currentTitle;\r\n    NEXT_PAGE_KEY\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.currentPage = -1;\r\n        this.currentCategoryIndex = 0;\r\n        this.currentTitle = this.props.title;\r\n        this.NEXT_PAGE_KEY = 'Q'.charCodeAt(0);\r\n        this.TEAM_DRIVER_SWAP_KEY = 'W'.charCodeAt(0);\r\n        \r\n\r\n        this.state = {\r\n            pageEntries: [],\r\n            visState: ENTRY_VISUAL_STATE.DRIVER\r\n        }\r\n    }\r\n\r\n    _handleKeyDown = (event) => {\r\n        if (event.keyCode === this.NEXT_PAGE_KEY) {\r\n            let newPage = this.currentPage + 1;\r\n            let newCategoryIndex = this.currentCategoryIndex;\r\n            if (newPage === this.props.content[this.currentCategoryIndex].lines.length) {\r\n                newPage = 0;\r\n                newCategoryIndex += 1;\r\n\r\n                if (newCategoryIndex === this.props.content.length) {\r\n                    newCategoryIndex = 0;\r\n                    newPage = -1;\r\n                }\r\n            }\r\n\r\n            this._updateEntries(newPage, newCategoryIndex);\r\n        }\r\n        // } else if (event.keyCode === this.TEAM_DRIVER_SWAP_KEY) {\r\n        //     if (this.state.visState === ENTRY_VISUAL_STATE.TEAM) {\r\n        //         this.setState({ visState: ENTRY_VISUAL_STATE.DRIVER });\r\n        //     } else if (this.state.visState === ENTRY_VISUAL_STATE.DRIVER) {\r\n        //         this.setState({ visState: ENTRY_VISUAL_STATE.TEAM });\r\n        //     }\r\n        // }\r\n    }\r\n\r\n    _updateEntries = async (newPage, newCategoryIndex) => {\r\n        // clear current entries\r\n        await this._clearEntries();\r\n        this.currentPage = newPage;\r\n        this.currentCategoryIndex = newCategoryIndex;\r\n        await this._addEntries();\r\n    }\r\n\r\n    _clearEntries = async () => {\r\n        const p = new Promise(resolve => {\r\n            this._removeEntry(() => {\r\n                resolve();\r\n            });\r\n        });\r\n        return p;\r\n    }\r\n\r\n    _removeEntry = (onCleared) => {\r\n        let entries = [...this.state.pageEntries];\r\n        entries.shift();\r\n        this.setState({ pageEntries: entries });\r\n        if (entries.length > 0) {\r\n            setTimeout(() => { this._removeEntry(onCleared) }, 100);\r\n        } else {\r\n            setTimeout(() => { onCleared() }, 600);\r\n        }\r\n    }\r\n\r\n    _addEntries = async () => {\r\n        const categoryName = this.props.content[this.currentCategoryIndex].name;\r\n        this.currentTitle = `${this.props.title} - ${categoryName ? categoryName : ''}`;\r\n        if (this.props.content[this.currentCategoryIndex].lines[this.currentPage]) {\r\n            const newEntries = [...this.props.content[this.currentCategoryIndex].lines[this.currentPage]];\r\n            for(const entry of newEntries) {\r\n                await this._addEntry(entry);\r\n            }\r\n        }\r\n    }\r\n\r\n    _addEntry = async (newEntry) => {\r\n        const p = new Promise(resolve => {\r\n            const newEntries = [...this.state.pageEntries];\r\n            newEntries.push(newEntry);\r\n            this.setState({ pageEntries: newEntries});\r\n            setTimeout(() => { resolve() }, 100);\r\n        });\r\n\r\n        return p;\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"keydown\", this._handleKeyDown);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener(\"keydown\", this._handleKeyDown);\r\n    }\r\n\r\n    render() {\r\n        const entries = this.state.pageEntries;\r\n\r\n        return (\r\n            <div className='SessionResultsPage'>\r\n                <div className='ChampionshipStandingsTitle'>{this.props.title}</div>\r\n                <TransitionGroup>\r\n                    {entries.map((entry, idx) => {\r\n                        return (\r\n                            <CSSTransition\r\n                                key={`${entry.id}-transition`}\r\n                                classNames=\"item\"\r\n                                timeout={2200}\r\n                            >\r\n                                <ChampionshipStandingsEntry key={`${entry.id}-entry`} entry={entry}/>\r\n                            </CSSTransition>\r\n                        )\r\n                    })}\r\n                </TransitionGroup>\r\n\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ChampionshipStandingsPage;","import React, { Component } from 'react';\r\nimport CSVToArray from '../util';\r\nimport ChampionshipStandingsPage from './ChampionshipStandingsPage';\r\n\r\nconst COLUMN_MAPPING = {\r\n    position: 0,\r\n    class: 1,\r\n    category: 2,\r\n    car_num: 3,\r\n    name: 4,\r\n    car: 5,\r\n    points: 6,\r\n};\r\n\r\nclass ChampionshipStandingsMenu extends Component {\r\n    fReader\r\n    content\r\n    paginationOrder\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { dataLoaded: false };\r\n        this.fileInput = React.createRef();\r\n        this.fReader = new FileReader();\r\n        this.paginationOrder = [\r\n            'GT3-PRO',\r\n            'GT3-SILVER',\r\n            'GT3-AM',\r\n            'GT3-ROOKIE',\r\n            'GT4-PRO',\r\n            'GT4-SILVER',\r\n            'GT4-AM',\r\n            'GT4-ROOKIE'\r\n        ];\r\n\r\n        this.state = {}\r\n    }\r\n\r\n    onFileRead = (e) => {\r\n        const content = this.fReader.result;\r\n\r\n        let csvArray = CSVToArray(content, ',');\r\n        csvArray.shift();\r\n        csvArray = csvArray.filter(entry=> {\r\n            return entry[COLUMN_MAPPING.name] !== '';\r\n        }).map((entry, idx) => {\r\n            return {\r\n                carNumber: entry[COLUMN_MAPPING.car_num],\r\n                class: entry[COLUMN_MAPPING.class],\r\n                position: entry[COLUMN_MAPPING.position],\r\n                name: entry[COLUMN_MAPPING.name],\r\n                car: entry[COLUMN_MAPPING.car],\r\n                points: entry[COLUMN_MAPPING.points],\r\n                id: idx,\r\n                category: entry[COLUMN_MAPPING.category]\r\n            }\r\n        })\r\n\r\n        this.content = this.paginateStandings(csvArray, 10);\r\n\r\n        this.setState({ dataLoaded: true });\r\n    }\r\n\r\n    paginateStandings = (lines, linesPerPage) => {\r\n        const categorizedLines = lines.reduce((result, value) => {\r\n            const key = `${value.class}-${value.category}`;\r\n            if (!result[key]) {\r\n                result[key] = [];\r\n            }\r\n            result[key].push(value);\r\n            return result;\r\n        }, {});\r\n\r\n\r\n        const namedPages = Object.keys(categorizedLines).map(key => {\r\n            const category = categorizedLines[key];\r\n            const pages = [];\r\n\r\n            let i;\r\n            for (i = 0; i < category.length; i += linesPerPage) {\r\n                pages.push(category.slice(i, i + linesPerPage));\r\n            }\r\n\r\n            return {\r\n                name: key,\r\n                lines: pages\r\n            };\r\n        }).sort((a, b) => {\r\n            const aIndex = this.paginationOrder.indexOf(a.name);\r\n            const bIndex = this.paginationOrder.indexOf(b.name);\r\n            if (aIndex < bIndex) {\r\n                return -1;\r\n            }\r\n            if (aIndex < bIndex) {\r\n                return 1;\r\n            }  \r\n            return 0;\r\n        });\r\n\r\n        return namedPages;\r\n    }\r\n\r\n    onUpload = () => {\r\n        this.fReader.onloadend = this.onFileRead;\r\n        this.fReader.readAsText(this.fileInput.current.files[0], 'UTF-8');\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({ title: event.target.value });\r\n    }\r\n\r\n    render() {\r\n        let component =\r\n            <div className='MainMenu'>\r\n                <div><input type=\"text\" placeholder='Title..' onChange={this.handleChange} /></div>\r\n                <div><input type=\"file\" ref={this.fileInput} /></div>\r\n                <div><button type=\"button\" onClick={this.onUpload}>load</button></div>\r\n            </div>;\r\n        if (this.state.dataLoaded) {\r\n            component = <ChampionshipStandingsPage content={this.content} title={this.state.title} />\r\n        }\r\n        return component;\r\n    }\r\n};\r\n\r\nexport default ChampionshipStandingsMenu;"," export default function CSVToArray(strData, strDelimiter){\r\n    // Check to see if the delimiter is defined. If not,\r\n    // then default to comma.\r\n    strDelimiter = (strDelimiter || \",\");\r\n\r\n    // Create a regular expression to parse the CSV values.\r\n    var objPattern = new RegExp(\r\n        (\r\n            // Delimiters.\r\n            \"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\r\n\r\n            // Quoted fields.\r\n            \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\r\n\r\n            // Standard fields.\r\n            \"([^\\\"\\\\\" + strDelimiter + \"\\\\r\\\\n]*))\"\r\n        ),\r\n        \"gi\"\r\n        );\r\n\r\n\r\n    // Create an array to hold our data. Give the array\r\n    // a default empty first row.\r\n    var arrData = [[]];\r\n\r\n    // Create an array to hold our individual pattern\r\n    // matching groups.\r\n    var arrMatches = null;\r\n\r\n\r\n    // Keep looping over the regular expression matches\r\n    // until we can no longer find a match.\r\n    while (arrMatches = objPattern.exec( strData )){\r\n\r\n        // Get the delimiter that was found.\r\n        var strMatchedDelimiter = arrMatches[ 1 ];\r\n\r\n        // Check to see if the given delimiter has a length\r\n        // (is not the start of string) and if it matches\r\n        // field delimiter. If id does not, then we know\r\n        // that this delimiter is a row delimiter.\r\n        if (\r\n            strMatchedDelimiter.length &&\r\n            strMatchedDelimiter !== strDelimiter\r\n            ){\r\n\r\n            // Since we have reached a new row of data,\r\n            // add an empty row to our data array.\r\n            arrData.push( [] );\r\n\r\n        }\r\n\r\n        var strMatchedValue;\r\n\r\n        // Now that we have our delimiter out of the way,\r\n        // let's check to see which kind of value we\r\n        // captured (quoted or unquoted).\r\n        if (arrMatches[ 2 ]){\r\n\r\n            // We found a quoted value. When we capture\r\n            // this value, unescape any double quotes.\r\n            strMatchedValue = arrMatches[ 2 ].replace(\r\n                new RegExp( \"\\\"\\\"\", \"g\" ),\r\n                \"\\\"\"\r\n                );\r\n\r\n        } else {\r\n\r\n            // We found a non-quoted value.\r\n            strMatchedValue = arrMatches[ 3 ];\r\n\r\n        }\r\n\r\n\r\n        // Now that we have our value string, let's add\r\n        // it to the data array.\r\n        arrData[ arrData.length - 1 ].push( strMatchedValue );\r\n    }\r\n\r\n    // Return the parsed data.\r\n    return( arrData );\r\n}","import React, { Component } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport OptionsList from './OptionsList';\r\nimport SessionResultsMenu from './SessionResults/SessionResultsMenu';\r\nimport ChampionshipStandingsPage from './Championship/ChampionshipStandingsMenu';\r\n\r\nconst OPTIONS = {\r\n    RESULT_JSON: 'result_json',\r\n    CHAMP_STANDINGS_JSON: 'champ_standings_json'\r\n};\r\n\r\nclass Menu extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {activePage: \"\"}\r\n    };\r\n\r\n    onClickedOption = (clicked) => {\r\n        this.setState({activePage: clicked.target.id});\r\n    }\r\n\r\n    render() {\r\n        let component = <OptionsList onClickedOption={this.onClickedOption}/>;\r\n        if (this.state.activePage === OPTIONS.RESULT_JSON) {\r\n            component = <SessionResultsMenu />\r\n        } else if (this.state.activePage === OPTIONS.CHAMP_STANDINGS_JSON) {\r\n            component = <ChampionshipStandingsPage />\r\n        } else {\r\n            component = <div className='MainMenu' id='MainMenu'>\r\n                            <Button type='button' id={OPTIONS.RESULT_JSON} onClick={this.onClickedOption}>Results .json</Button>\r\n                            <Button type='button' id={OPTIONS.CHAMP_STANDINGS_JSON} onClick={this.onClickedOption}>Championship standings .csv</Button>\r\n                        </div>;\r\n        }\r\n\r\n        return component;\r\n    }\r\n}\r\n\r\nexport default Menu;","import React from 'react';\nimport './App.css';\nimport Menu from './menu';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Menu />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}