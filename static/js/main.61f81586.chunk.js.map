{"version":3,"sources":["OptionsList.js","enums.js","Shared/Title.js","Shared/OverlayPage.js","SessionResults/SessionResultEntry.js","Shared/ResultsParser.js","util.js","SessionResults/SessionResultsMenu.js","Championship/ChampionshipStandingsEntry.js","Championship/ChampionshipStandingsMenu.js","menu.js","App.js","serviceWorker.js","index.js"],"names":["Component","ENTRY_VISUAL_STATE","Title","props","key","this","staticTitle","className","title","OverlayPage","_handleKeyDown","event","a","keyCode","NEXT_PAGE_KEY","newPage","currentPage","newCategoryIndex","currentCategoryIndex","content","lines","length","name","state","_updateTitle","_updateEntries","newTitle","p","Promise","resolve","setState","setTimeout","_clearEntries","_addEntries","_removeEntry","onCleared","entries","pageEntries","shift","categoryName","currentTitle","newEntries","entry","_addEntry","newEntry","push","charCodeAt","TEAM_DRIVER_SWAP_KEY","visState","document","addEventListener","removeEventListener","TransitionGroup","CSSTransition","classNames","timeout","map","id","entryClass","SessionResultEntry","sizeForDeficitLength","timing","deficit","sizeForTimeLength","bestLap","text","visualstate","car","teamName","carId","category","position","carNumber","style","fontSize","PAGINATION_ORDER","_getClass","carModel","parseInt","_getCategory","cupCategory","_getEntryName","line","teamNameMapping","currentDriver","firstName","lastName","_msToTime","ms","msString","Date","toISOString","slice","_categorizeEntryObjects","categorizedLines","reduce","result","value","class","Object","keys","i","pages","idx","sort","b","aIndex","indexOf","bIndex","ParseChampionshipResultsCSV","csvData","COLUMN_MAPPING","csvArray","strData","strDelimiter","objPattern","RegExp","arrData","arrMatches","exec","strMatchedValue","strMatchedDelimiter","replace","CSVToArray","filter","toUpperCase","championshipStandings","points","SessionResultsMenu","onFileRead","e","fReader","jsonData","undefined","sessionResult","leaderBoardLines","isRace","sessionType","firstPlaceLaps","lapCount","firstPlaceTime","totalTime","firstPlaceBestLap","_calculateTimeDeficit","lapCountDiff","resObjects","CarMapping","raceNumber","toString","ParseSessionResultJSON","JSON","parse","dataLoaded","onUpload","onloadend","readAsText","fileInput","current","files","handleChange","target","React","createRef","textInput","FileReader","component","type","placeholder","onChange","ref","onClick","ChampionshipStandingsEntry","ChampionshipStandingsMenu","fileContent","OPTIONS","Menu","onClickedOption","clicked","activePage","Button","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.61f81586.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass OptionsList extends Component {\r\n    allOptions = [/*\"Leaderboard\", */\"From results .json\"];\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='MainMenu'>\r\n                {\r\n                    this.allOptions.map((option, idx) => {\r\n                        return (<div key={idx} background='black' onClick={() => {\r\n                            this.props.onClickedOption(option);\r\n                        }}>\r\n                            {option}\r\n                        </div>)\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default OptionsList;","export const ENTRY_VISUAL_STATE = {\r\n    DRIVER: \"driver\",\r\n    TEAM: \"team\"\r\n}","import React, { Component } from 'react';\r\n\r\nexport class Title extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div key={this.props.staticTitle} className='Title'>{`${this.props.title} - ${this.props.staticTitle}`}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Title;","import React, { Component } from 'react';\r\nimport { ENTRY_VISUAL_STATE } from '../enums';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group'\r\nimport { Title } from './Title';\r\n\r\nclass OverlayPage extends Component {\r\n\r\n    currentPage\r\n    currentCategoryIndex\r\n    currentTitle;\r\n    NEXT_PAGE_KEY\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.currentPage = -1;\r\n        this.currentCategoryIndex = 0;\r\n        this.currentTitle = this.props.title;\r\n        this.NEXT_PAGE_KEY = 'Q'.charCodeAt(0);\r\n        this.TEAM_DRIVER_SWAP_KEY = 'W'.charCodeAt(0);\r\n\r\n        this.state = {\r\n            pageEntries: [],\r\n            visState: ENTRY_VISUAL_STATE.DRIVER,\r\n            staticTitle: ''\r\n        }\r\n    }\r\n\r\n    _handleKeyDown = async (event) => {\r\n        if (event.keyCode === this.NEXT_PAGE_KEY) {\r\n            let newPage = this.currentPage + 1;\r\n            let newCategoryIndex = this.currentCategoryIndex;\r\n            if (newPage === this.props.content[this.currentCategoryIndex].lines.length) {\r\n                newPage = 0;\r\n                newCategoryIndex += 1;\r\n\r\n                if (newCategoryIndex === this.props.content.length) {\r\n                    newCategoryIndex = 0;\r\n                    newPage = -1;\r\n                } \r\n            }\r\n\r\n            if (this.props.content[newCategoryIndex] &&\r\n                this.props.content[newCategoryIndex].name !== this.state.staticTitle &&\r\n                newPage !== -1) {\r\n                await this._updateTitle(this.props.content[newCategoryIndex].name);\r\n            }\r\n\r\n            await this._updateEntries(newPage, newCategoryIndex);\r\n\r\n            if (newPage === -1) {\r\n                await this._updateTitle('');\r\n            }\r\n        }\r\n        // } else if (event.keyCode === this.TEAM_DRIVER_SWAP_KEY) {\r\n        //     if (this.state.visState === ENTRY_VISUAL_STATE.TEAM) {\r\n        //         this.setState({ visState: ENTRY_VISUAL_STATE.DRIVER });\r\n        //     } else if (this.state.visState === ENTRY_VISUAL_STATE.DRIVER) {\r\n        //         this.setState({ visState: ENTRY_VISUAL_STATE.TEAM });\r\n        //     }\r\n        // }\r\n    }\r\n\r\n    _updateTitle = async (newTitle) => {\r\n        const p = new Promise(resolve => {\r\n            this.setState({ staticTitle: '' });\r\n            setTimeout(() => {\r\n                this.setState({ staticTitle: newTitle });\r\n                setTimeout(() => {\r\n                    resolve();\r\n                }, 200);\r\n            }, 500);\r\n        });\r\n\r\n        return p;\r\n    }\r\n\r\n    _updateEntries = async (newPage, newCategoryIndex) => {\r\n        // clear current entries\r\n        await this._clearEntries();\r\n        this.currentPage = newPage;\r\n        this.currentCategoryIndex = newCategoryIndex;\r\n        await this._addEntries();\r\n    }\r\n\r\n    _clearEntries = async () => {\r\n        const p = new Promise(resolve => {\r\n            this._removeEntry(() => {\r\n                resolve();\r\n            });\r\n        });\r\n        return p;\r\n    }\r\n\r\n    _removeEntry = (onCleared) => {\r\n        let entries = [...this.state.pageEntries];\r\n        entries.shift();\r\n        this.setState({ pageEntries: entries });\r\n        if (entries.length > 0) {\r\n            setTimeout(() => { this._removeEntry(onCleared) }, 100);\r\n        } else {\r\n            setTimeout(() => { onCleared() }, 600);\r\n        }\r\n    }\r\n\r\n    _addEntries = async () => {\r\n        const categoryName = this.props.content[this.currentCategoryIndex].name;\r\n        this.currentTitle = `${this.props.title} - ${categoryName ? categoryName : ''}`;\r\n        if (this.props.content[this.currentCategoryIndex].lines[this.currentPage]) {\r\n            const newEntries = [...this.props.content[this.currentCategoryIndex].lines[this.currentPage]];\r\n            for (const entry of newEntries) {\r\n                await this._addEntry(entry);\r\n            }\r\n        }\r\n    }\r\n\r\n    _addEntry = async (newEntry) => {\r\n        const p = new Promise(resolve => {\r\n            const newEntries = [...this.state.pageEntries];\r\n            newEntries.push(newEntry);\r\n            this.setState({ pageEntries: newEntries });\r\n            setTimeout(() => { resolve() }, 100);\r\n        });\r\n\r\n        return p;\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"keydown\", this._handleKeyDown);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener(\"keydown\", this._handleKeyDown);\r\n    }\r\n\r\n    title() {\r\n        if (this.state.staticTitle !== '') {\r\n            return <Title staticTitle={this.state.staticTitle} title={this.props.title} />;\r\n        }\r\n\r\n        return <div></div>;\r\n    }\r\n\r\n    render() {\r\n        const entries = this.state.pageEntries;\r\n        return (\r\n            <div className='OverlayPage'>\r\n                <div className='test'>\r\n                    <TransitionGroup>\r\n                        <CSSTransition\r\n                            key={`${this.state.staticTitle}-transition`}\r\n                            classNames=\"item\"\r\n                            timeout={500}\r\n                        >\r\n                            {this.title()}\r\n                        </CSSTransition>\r\n                    </TransitionGroup>\r\n                </div>\r\n                <TransitionGroup>\r\n                    {entries.map((entry) => {\r\n                        return (\r\n                            <CSSTransition\r\n                                key={`${entry.id}-transition`}\r\n                                classNames=\"item\"\r\n                                timeout={2200}\r\n                            >\r\n                                <this.props.entryClass key={`${entry.id}-entry`} entry={entry} />\r\n                            </CSSTransition>\r\n                        )\r\n                    })}\r\n                </TransitionGroup>\r\n\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default OverlayPage;","import React, { Component } from 'react';\r\nimport { ENTRY_VISUAL_STATE } from '../enums';\r\n\r\nclass SessionResultEntry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    sizeForDeficitLength = () => {\r\n        if (this.props.entry.timing.deficit.length >= 9) {\r\n            return 21;\r\n        } else if (this.props.entry.timing.deficit.length === 8) {\r\n            return 24;\r\n        } else if (this.props.entry.timing.deficit.length === 7) {\r\n            return 27;\r\n        } else if (this.props.entry.timing.deficit.length <= 6) {\r\n            return 30;\r\n        }   \r\n    }\r\n\r\n    sizeForTimeLength = () => {\r\n        if (this.props.entry.timing.bestLap.length >= 9) {\r\n            return 27;\r\n        } else if (this.props.entry.timing.bestLap.length === 8) {\r\n            return 30;\r\n        } else if (this.props.entry.timing.bestLap.length === 7) {\r\n            return 33;\r\n        } else if (this.props.entry.timing.bestLap.length <= 6) {\r\n            return 36;\r\n        }   \r\n    }\r\n\r\n    render() {\r\n        \r\n        let text = \"\";\r\n        if (this.props.visualstate === ENTRY_VISUAL_STATE.TEAM) {\r\n            text = this.props.entry.car.teamName;\r\n        } else {\r\n            text = this.props.entry.name;\r\n        }\r\n\r\n        return (\r\n            <div key={ this.props.entry.car.carId } className={`Row SessionResultsRow-${this.props.entry.category}`}>\r\n                <div className='SessionResultPositionCol'>{ this.props.entry.position }</div>\r\n                <div className={`SessionResultCarNumberCol ${this.props.entry.category}`}>{ this.props.entry.carNumber }</div>\r\n                <div className='SessionResultDriverCol'>{ text }</div>\r\n                <div className='SessionResultCarCol'>{ this.props.entry.car }</div>\r\n                <div className='SessionResultTimeCol' style={{fontSize: this.sizeForTimeLength()}}>{ this.props.entry.timing.bestLap }</div>\r\n                <div className='SessionResultTimeDiffCol' style={{fontSize: this.sizeForDeficitLength()}}>{ this.props.entry.timing.deficit }</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SessionResultEntry;","import CarMapping from '../car_name_mapping.json';\r\nimport CSVToArray from '../util';\r\n\r\n/**\r\n * All of these methods should return data in this format:\r\n * [\r\n *      {\r\n *          name: `${class}-${category}`\r\n *          lines: [{\r\n *                          id: \"\",\r\n *                          car: \"\",\r\n *                          carNumber: \"\",\r\n *                          category: \"\", // PRO, SILVER, AM or ROOKIE\r\n *                          class: \"\", // GT3, ST, CUP or GT4\r\n *                          name: \"\",\r\n *                          position: \"\",\r\n *                          championshipStandings: {\r\n *                              points: \"\",\r\n *                              deficit: \"\", \r\n *                          }\r\n *                          timing: {\r\n *                              bestLap: \"\",\r\n *                              deficit: \"\"\r\n *                          }\r\n *           ]\r\n *      }\r\n * ]\r\n * \r\n * The array should be sorted by:\r\n *  \r\n * 1. 'GT3-PRO',\r\n * 2. 'GT3-SILVER',\r\n * 3. 'GT3-AM',\r\n * 4. 'GT3-ROOKIE',\r\n * 5. 'GT4-PRO',\r\n * 6. 'GT4-SILVER',\r\n * 7. 'GT4-AM',\r\n * 8. 'GT4-ROOKIE'\r\n * \r\n */\r\n\r\nconst LINES_PER_PAGE = 10;\r\n\r\nconst PAGINATION_ORDER = [\r\n    'GT3-PRO',\r\n    'GT3-SILVER',\r\n    'GT3-AM',\r\n    'GT3-ROOKIE',\r\n    'ST-PRO',\r\n    'ST-SILVER',\r\n    'ST-AM',\r\n    'ST-ROOKIE',\r\n    'CUP-PRO',\r\n    'CUP-SILVER',\r\n    'CUP-AM',\r\n    'CUP-ROOKIE',\r\n    'GT4-PRO',\r\n    'GT4-SILVER',\r\n    'GT4-AM',\r\n    'GT4-ROOKIE'\r\n];\r\n\r\nconst _getClass = (carModel) => {\r\n    if (parseInt(carModel, 10) === 18) {\r\n        return 'ST';\r\n    }\r\n    if (parseInt(carModel, 10) === 9) {\r\n        return 'CUP';\r\n    }\r\n\r\n    return carModel < 50 ? 'GT3' : 'GT4';\r\n};\r\n\r\nconst _getCategory = (cupCategory) => {\r\n    switch (cupCategory) {\r\n        case 0:\r\n            return 'PRO';\r\n        case 1:\r\n            return 'SILVER';\r\n        case 2:\r\n            return 'AM';\r\n        case 3:\r\n            return 'ROOKIE';\r\n        default:\r\n            return 'ROOKIE';\r\n    };\r\n};\r\n\r\n// TODO: support team name mapping file\r\nconst _getEntryName = (line, teamNameMapping) => {\r\n    if (!teamNameMapping) {\r\n        return `${line.currentDriver.firstName} ${line.currentDriver.lastName}`;\r\n    }\r\n\r\n    return '---';\r\n};\r\n\r\nconst _msToTime = (ms) => {\r\n    let msString = '';\r\n    if (ms > 60000) {\r\n        msString = new Date(ms).toISOString().slice(14, -1);\r\n    }\r\n    else {\r\n        msString = new Date(ms).toISOString().slice(17, -1);\r\n    }\r\n\r\n    if (msString[0] === '0') {\r\n        msString = msString.slice(1);\r\n    }\r\n\r\n    return msString\r\n}\r\n\r\nconst _categorizeEntryObjects = (entries) => {\r\n    const categorizedLines = entries.reduce((result, value) => {\r\n        const key = `${value.class}-${value.category}`;\r\n        if (!result[key]) {\r\n            result[key] = [];\r\n        }\r\n        result[key].push(value);\r\n        return result;\r\n    }, {});\r\n\r\n\r\n    return Object.keys(categorizedLines).map(key => {\r\n        let category = categorizedLines[key];\r\n        const pages = [];\r\n\r\n        category = category.map((entry, idx) => {\r\n            return {\r\n                ...entry,\r\n                position: `${idx + 1}`\r\n            }\r\n        });\r\n\r\n        let i;\r\n        for (i = 0; i < category.length; i += LINES_PER_PAGE) {\r\n            pages.push(category.slice(i, i + LINES_PER_PAGE));\r\n        }\r\n\r\n        return {\r\n            name: key,\r\n            lines: pages\r\n        };\r\n    }).sort((a, b) => {\r\n        const aIndex = PAGINATION_ORDER.indexOf(a.name);\r\n        const bIndex = PAGINATION_ORDER.indexOf(b.name);\r\n        if (aIndex < bIndex) {\r\n            return -1;\r\n        }\r\n        if (aIndex > bIndex) {\r\n            return 1;\r\n        }\r\n        return 0;\r\n    });\r\n};\r\n\r\nexport const ParseChampionshipResultsCSV = (csvData) => {\r\n    const COLUMN_MAPPING = {\r\n        position: 0,\r\n        class: 1,\r\n        category: 2,\r\n        car_num: 3,\r\n        name: 4,\r\n        car: 5,\r\n        points: 6,\r\n    };\r\n\r\n    let csvArray = CSVToArray(csvData, ',');\r\n    csvArray.shift();\r\n    const entries = csvArray.filter(entry => {\r\n        return entry[COLUMN_MAPPING.name] !== '';\r\n    }).map((entry, idx) => {\r\n        return {\r\n            id: idx,\r\n            carNumber: entry[COLUMN_MAPPING.car_num],\r\n            class: entry[COLUMN_MAPPING.class],\r\n            name: entry[COLUMN_MAPPING.name],\r\n            car: entry[COLUMN_MAPPING.car],\r\n            category: entry[COLUMN_MAPPING.category].toUpperCase(),\r\n            championshipStandings: {\r\n                points: parseInt(entry[COLUMN_MAPPING.points], 10),\r\n                deficit: 0\r\n            }\r\n        }\r\n    }).sort((a, b) => {\r\n        if (a.championshipStandings.points > b.championshipStandings.points) {\r\n            return -1;\r\n        }\r\n        if (a.championshipStandings.points < b.championshipStandings.points) {\r\n            return 1;\r\n        }\r\n        return 0;\r\n    });\r\n    \r\n    return _categorizeEntryObjects(entries);\r\n};\r\n\r\nexport const ParseSessionResultJSON = (jsonData, teamNameMapping = undefined) => {\r\n    const lines = jsonData.sessionResult.leaderBoardLines;\r\n    const isRace = jsonData.sessionType === 'R';\r\n\r\n    const firstPlaceLaps = lines[0].timing.lapCount;\r\n    const firstPlaceTime = lines[0].timing.totalTime;\r\n    const firstPlaceBestLap = lines[0].timing.bestLap;\r\n\r\n    const _calculateTimeDeficit = (timing, isRace, idx) => {\r\n        if (isRace) {\r\n            if (timing.lapCount < firstPlaceLaps) {\r\n                const lapCountDiff = firstPlaceLaps - timing.lapCount;\r\n                return `+${lapCountDiff} lap${lapCountDiff > 1 ? 's' : ''}`;\r\n            }\r\n            else {\r\n                return idx === 0 ? '' : `+${_msToTime(timing.totalTime - firstPlaceTime)}`;\r\n            }\r\n        } else {\r\n            return idx === 0 ? '' : `+${_msToTime(timing.bestLap - firstPlaceBestLap)}`;\r\n        }\r\n    };\r\n\r\n    const resObjects = lines.map((line, idx) => {\r\n        return {\r\n            id: line.car.carId,\r\n            car: CarMapping[line.car.carModel],\r\n            carNumber: line.car.raceNumber.toString(),\r\n            category: _getCategory(line.car.cupCategory),\r\n            class: _getClass(line.car.carModel),\r\n            name: _getEntryName(line, teamNameMapping),\r\n            points: '0',\r\n            position: idx + 1,\r\n            timing: {\r\n                bestLap: _msToTime(line.timing.bestLap),\r\n                deficit: _calculateTimeDeficit(line.timing, isRace, idx)\r\n            }\r\n            \r\n        }\r\n    });\r\n\r\n    return _categorizeEntryObjects(resObjects);\r\n};"," export default function CSVToArray(strData, strDelimiter){\r\n    // Check to see if the delimiter is defined. If not,\r\n    // then default to comma.\r\n    strDelimiter = (strDelimiter || \",\");\r\n\r\n    // Create a regular expression to parse the CSV values.\r\n    var objPattern = new RegExp(\r\n        (\r\n            // Delimiters.\r\n            \"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\r\n\r\n            // Quoted fields.\r\n            \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\r\n\r\n            // Standard fields.\r\n            \"([^\\\"\\\\\" + strDelimiter + \"\\\\r\\\\n]*))\"\r\n        ),\r\n        \"gi\"\r\n        );\r\n\r\n\r\n    // Create an array to hold our data. Give the array\r\n    // a default empty first row.\r\n    var arrData = [[]];\r\n\r\n    // Create an array to hold our individual pattern\r\n    // matching groups.\r\n    var arrMatches = null;\r\n\r\n\r\n    // Keep looping over the regular expression matches\r\n    // until we can no longer find a match.\r\n    while (arrMatches = objPattern.exec( strData )){\r\n\r\n        // Get the delimiter that was found.\r\n        var strMatchedDelimiter = arrMatches[ 1 ];\r\n\r\n        // Check to see if the given delimiter has a length\r\n        // (is not the start of string) and if it matches\r\n        // field delimiter. If id does not, then we know\r\n        // that this delimiter is a row delimiter.\r\n        if (\r\n            strMatchedDelimiter.length &&\r\n            strMatchedDelimiter !== strDelimiter\r\n            ){\r\n\r\n            // Since we have reached a new row of data,\r\n            // add an empty row to our data array.\r\n            arrData.push( [] );\r\n\r\n        }\r\n\r\n        var strMatchedValue;\r\n\r\n        // Now that we have our delimiter out of the way,\r\n        // let's check to see which kind of value we\r\n        // captured (quoted or unquoted).\r\n        if (arrMatches[ 2 ]){\r\n\r\n            // We found a quoted value. When we capture\r\n            // this value, unescape any double quotes.\r\n            strMatchedValue = arrMatches[ 2 ].replace(\r\n                new RegExp( \"\\\"\\\"\", \"g\" ),\r\n                \"\\\"\"\r\n                );\r\n\r\n        } else {\r\n\r\n            // We found a non-quoted value.\r\n            strMatchedValue = arrMatches[ 3 ];\r\n\r\n        }\r\n\r\n\r\n        // Now that we have our value string, let's add\r\n        // it to the data array.\r\n        arrData[ arrData.length - 1 ].push( strMatchedValue );\r\n    }\r\n\r\n    // Return the parsed data.\r\n    return( arrData );\r\n}","import React, { Component } from 'react';\r\n//import SessionResultsPage from './SessionResultsPage';\r\nimport OverlayPage from '../Shared/OverlayPage';\r\nimport TrackMapping from '../track_name_mapping.json';\r\nimport SessionMapping from '../session_mapping.json';\r\nimport CarMapping from '../car_name_mapping.json';\r\nimport SessionResultEntry from './SessionResultEntry';\r\nimport { ParseSessionResultJSON } from '../Shared/ResultsParser';\r\n\r\nclass SessionResultsMenu extends Component {\r\n    intervalID;\r\n    fReader;\r\n    content;\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {dataLoaded: false, title: ''};\r\n        this.fileInput = React.createRef();\r\n        this.textInput = React.createRef();\r\n        this.fReader = new FileReader();\r\n    }\r\n\r\n    onFileRead = (e) => {\r\n        const content = this.fReader.result;\r\n        this.content = ParseSessionResultJSON(JSON.parse(content));\r\n\r\n        this.setState({dataLoaded: true});\r\n    }\r\n\r\n    onUpload = () => {\r\n        this.fReader.onloadend = this.onFileRead;\r\n        this.fReader.readAsText(this.fileInput.current.files[0], 'UTF-16LE');\r\n    }\r\n\r\n    handleChange = (event) => {    \r\n        this.setState({title: event.target.value});  \r\n    }\r\n\r\n    render() {\r\n\r\n        let component = \r\n        <div className='MainMenu'>\r\n            <div><input type=\"text\" placeholder='Title..' onChange={this.handleChange}/></div>\r\n            <div><input type=\"file\" ref={this.fileInput}/></div>\r\n            <div><button type=\"button\" onClick={this.onUpload}>load</button></div>\r\n        </div>;\r\n        if (this.state.dataLoaded) {\r\n            component = <div className='SessionResultsPage'>\r\n                            <OverlayPage content={this.content} title={this.state.title} entryClass={SessionResultEntry} />\r\n                        </div>;\r\n        }\r\n        return component;\r\n    }\r\n}\r\n\r\nexport default SessionResultsMenu;","import React, { Component } from 'react';\r\n\r\nclass ChampionshipStandingsEntry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <div className={`Row ChampionshipStandingsRow-${this.props.entry.category}`}>\r\n                <div className='ChampionshipStandingsPositionCol'>{ this.props.entry.position }</div>\r\n                <div className={`ChampionshipStandingsCarNumCol ${this.props.entry.category}`}>{ this.props.entry.carNumber }</div>\r\n                <div className='ChampionshipStandingsNameCol'>{ this.props.entry.name }</div>\r\n                <div className='ChampionshipStandingsCarCol'>{ this.props.entry.car }</div>\r\n                <div className='ChampionshipStandingsPointsCol'>{ this.props.entry.championshipStandings.points }</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChampionshipStandingsEntry;","import React, { Component } from 'react';\r\nimport ChampionshipStandingsEntry from './ChampionshipStandingsEntry';\r\nimport OverlayPage from '../Shared/OverlayPage';\r\nimport { ParseChampionshipResultsCSV } from '../Shared/ResultsParser';\r\n\r\n\r\n\r\nclass ChampionshipStandingsMenu extends Component {\r\n    fReader\r\n    content\r\n    paginationOrder\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { dataLoaded: false };\r\n        this.fileInput = React.createRef();\r\n        this.fReader = new FileReader();\r\n\r\n        this.state = {}\r\n    }\r\n\r\n    onFileRead = (e) => {\r\n        const fileContent = this.fReader.result;\r\n        this.content = ParseChampionshipResultsCSV(fileContent);\r\n\r\n        this.setState({ dataLoaded: true });\r\n    }\r\n\r\n    onUpload = () => {\r\n        this.fReader.onloadend = this.onFileRead;\r\n        this.fReader.readAsText(this.fileInput.current.files[0], 'UTF-8');\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({ title: event.target.value });\r\n    }\r\n\r\n    render() {\r\n        let component =\r\n            <div className='MainMenu'>\r\n                <div><input type=\"text\" placeholder='Title..' onChange={this.handleChange} /></div>\r\n                <div><input type=\"file\" ref={this.fileInput} /></div>\r\n                <div><button type=\"button\" onClick={this.onUpload}>load</button></div>\r\n            </div>;\r\n        if (this.state.dataLoaded) {\r\n            component = <OverlayPage content={this.content} title={this.state.title} entryClass={ChampionshipStandingsEntry} />\r\n        }\r\n        return component;\r\n    }\r\n};\r\n\r\nexport default ChampionshipStandingsMenu;","import React, { Component } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport OptionsList from './OptionsList';\r\nimport SessionResultsMenu from './SessionResults/SessionResultsMenu';\r\nimport ChampionshipStandingsMenu from './Championship/ChampionshipStandingsMenu';\r\n\r\nconst OPTIONS = {\r\n    RESULT_JSON: 'result_json',\r\n    CHAMP_STANDINGS_JSON: 'champ_standings_json'\r\n};\r\n\r\nclass Menu extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {activePage: \"\"}\r\n    };\r\n\r\n    onClickedOption = (clicked) => {\r\n        this.setState({activePage: clicked.target.id});\r\n    }\r\n\r\n    render() {\r\n        let component = <OptionsList onClickedOption={this.onClickedOption}/>;\r\n        if (this.state.activePage === OPTIONS.RESULT_JSON) {\r\n            component = <SessionResultsMenu />\r\n        } else if (this.state.activePage === OPTIONS.CHAMP_STANDINGS_JSON) {\r\n            component = <ChampionshipStandingsMenu />\r\n        } else {\r\n            component = <div className='MainMenu' id='MainMenu'>\r\n                            <Button type='button' id={OPTIONS.RESULT_JSON} onClick={this.onClickedOption}>Results .json</Button>\r\n                            <Button type='button' id={OPTIONS.CHAMP_STANDINGS_JSON} onClick={this.onClickedOption}>Championship standings .csv</Button>\r\n                        </div>;\r\n        }\r\n\r\n        return component;\r\n    }\r\n}\r\n\r\nexport default Menu;","import React from 'react';\nimport './App.css';\nimport Menu from './menu';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Menu />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}